#!/bin/bash

# Exit if undeclared variables are used
set -o nounset

# Exit if any command exits with error
set -o errexit

if [ ${#*} -lt 1 ]; then
	echo "Not enough arguments, specify find method."
	exit 1
fi

function git-find-help() {
	echo "Usage: $0 <METHOD> [METHOD OPTIONS]"
	echo "Find git repositories using the specified method."
	echo
	echo "Available METHODs:"
	echo "  ahead-origin      find git repositories ahead of origin."
	echo "  uncommitted       find git repositories with uncommited changes."
	echo
	echo "For information about the METHOD OPTIONS use"
	echo "  $0 <method> --help"
}

function help-ahead-origin() {
	echo "Usage: $0 ahead-origin [path]"
	echo "Find git repositories ahead of origin."
	echo
	echo "If [path] is omitted, the current path is used."
	echo
	echo "Available options:"
	echo "  -l      list repositories only, not the details."
}

function search-ahead-origin() {
	TARGET_DIR="."
	DETAIL_INFO=1

	for ARG in ${@:2}; do
		# echo "ARG: $ARG"
		case "$ARG" in
			--help)
				help-ahead-origin
				exit
				;;
			-l)
				DETAIL_INFO=0
				;;
			*)
				TARGET_DIR="$ARG"
				;;
		esac
	done

	echo "Searching..."
	for GIT_DIR in $(find "$TARGET_DIR" -name '.git'); do
		WORK_TREE=${GIT_DIR%/.git}

		set +o errexit # disable exit on error for grep
		AHEAD_INFO=$(git --work-tree "$WORK_TREE" --git-dir "$GIT_DIR" status | grep "is ahead of ")
		GREP_RES=$?
		set -o errexit # restore exit on error

		if [ $GREP_RES -eq 0 ]; then
			[ $DETAIL_INFO -gt 0 ] && \
				echo "$WORK_TREE: $AHEAD_INFO" ||
				echo "$WORK_TREE"
		fi
	done
}

function help-uncommitted() {
	echo "Usage: $0 uncommitted [PATH] [OPTIONS]"
	echo "Find git repositories with uncommitted changes."
	echo
	echo "If PATH is omitted, the current path is used."
	echo
	echo "Available options:"
	echo "  -l      list repositories only, not the changes."
	echo "  -w      add blank line after each repository."
	echo "  -f      show full details, not just headers of changes."
}

function search-uncommitted() {
	TARGET_DIR="."
	DETAIL_INFO=1
	WHITE_LINE=0
	FULL_DETAIL=0

	for ARG in ${@:2}; do
		# echo "ARG: $ARG"
		case "$ARG" in
			--help)
				help-uncommitted
				exit
				;;
			-l)
				DETAIL_INFO=0
				;;
			-w)
				WHITE_LINE=1
				;;
			-f)
				DETAIL_INFO=0
				FULL_DETAIL=1
				;;
			*)
				TARGET_DIR="$ARG"
				;;
		esac
	done

	echo "Searching in $TARGET_DIR"
	for GIT_DIR in $(find "$TARGET_DIR" -name '.git'); do
		WORK_TREE=${GIT_DIR%/.git}

		set +o errexit # disable exit on error for grep
		AHEAD_INFO=$(git --work-tree "$WORK_TREE" --git-dir "$GIT_DIR" status | grep "Changes\|Untracked")
		GREP_RES=$?
		set -o errexit # restore exit on error

		if [ $GREP_RES -eq 0 ]; then
			echo "$WORK_TREE"
			[ $DETAIL_INFO -gt 0 ] && echo "$AHEAD_INFO"
			[ $FULL_DETAIL -gt 0 ] && git --work-tree "$WORK_TREE" --git-dir "$GIT_DIR" status
			[ $WHITE_LINE -gt 0 ] && echo
		fi
	done
}

case "$1" in
ahead-origin)
	search-ahead-origin $@
	;;
uncommitted)
	search-uncommitted $@
	;;
-h|--help|-help)
	git-find-help $@
	;;
*)
	echo "Unknown search method: $1"
	exit 1
	;;
esac

