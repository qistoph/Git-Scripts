#!/bin/bash

# git-find
# Chris van Marle 2011
#
# git-find is a bash script that assists in managing your git repositories
# This script allows you to find repositories that:
# - are ahead of their origin
# - have uncommitted changes

# Exit if undeclared variables are used
set -o nounset

# Exit if any command exits with error
set -o errexit

function control_c() { #{{{
	exit 1
} #}}}

trap control_c SIGINT

function git-find-help() { #{{{
	echo "Usage: $0 <METHOD> [METHOD OPTIONS]"
	echo "Find git repositories using the specified method."
	echo
	echo "Available METHODs:"
	echo "  ahead             find git repositories ahead of origin."
	echo "  uncommitted       find git repositories with uncommitted changes."
	echo
	echo "For information about the METHOD OPTIONS use"
	echo "  $0 <method> --help"
} #}}}

function help-ahead() { #{{{
	echo "Usage: $0 ahead [path]"
	echo "Find git repositories ahead of origin."
	echo
	echo "If [path] is omitted, the current path is used."
	echo
	echo "Available options:"
	echo "  -f      show full git details, not just headers of changes."
	echo "  -l      list repositories only, not the details."
} #}}}

function search-ahead() { #{{{
	TARGET_DIR="."
	DETAIL_INFO=1
	FULL_DETAIL=0

	for ARG in ${@:2}; do
		# echo "ARG: $ARG"
		case "$ARG" in
			-h|--help|-help)
				help-ahead
				exit
				;;
			-l)
				DETAIL_INFO=0
				;;
			-f)
				DETAIL_INFO=0
				FULL_DETAIL=1
				;;
			*)
				TARGET_DIR="$ARG"
				;;
		esac
	done

	echo "Searching..."
	for GIT_DIR in $(find "$TARGET_DIR" -name '.git'); do
		WORK_TREE=${GIT_DIR%/.git}

		set +o errexit # disable exit on error for grep
		AHEAD_INFO=$(git --work-tree "$WORK_TREE" \
			--git-dir "$GIT_DIR" status | grep "is ahead of ")
		GREP_RES=$?
		set -o errexit # restore exit on error

		if [ $GREP_RES -eq 0 ]; then
			[ $DETAIL_INFO -gt 0 ] && \
				echo "$WORK_TREE: $AHEAD_INFO" ||
				echo "$WORK_TREE"
			[ $FULL_DETAIL -gt 0 ] && \
				git --work-tree "$WORK_TREE" \
					--git-dir "$GIT_DIR" status
		fi
	done
} #}}}

function help-uncommitted() { #{{{
	echo "Usage: $0 uncommitted [PATH] [OPTIONS]"
	echo "Find git repositories with uncommitted changes."
	echo
	echo "If PATH is omitted, the current path is used."
	echo
	echo "Available options:"
	echo "  -f      show full details, not just headers of changes."
	echo "  -l      list repositories only, not the changes."
	echo "  -w      add blank line after each repository."
	echo "  -t      search for uncommitted changes in tracked files only"
	echo "          (skip untracked files)."
	echo "  -u      search for untracked files only (skip tracked files"
} #}}}

function search-uncommitted() { #{{{
	TARGET_DIR="."
	DETAIL_INFO=1
	WHITE_LINE=0
	FULL_DETAIL=0
	TRACKED_FILES_ONLY=0
	UNTRACKED_FILES_ONLY=0

	for ARG in ${@:2}; do
		# echo "ARG: $ARG"
		case "$ARG" in
			-h|--help|-help)
				help-uncommitted
				exit
				;;
			-l)
				DETAIL_INFO=0
				;;
			-w)
				WHITE_LINE=1
				;;
			-f)
				DETAIL_INFO=0
				FULL_DETAIL=1
				;;
			-t)
				TRACKED_FILES_ONLY=1
				;;
			-u)
				UNTRACKED_FILES_ONLY=1
				;;
			*)
				TARGET_DIR="$ARG"
				;;
		esac
	done

	if [ $TRACKED_FILES_ONLY -gt 0 ]; then
		GREP_LINE="^# Changes"
	elif [ $UNTRACKED_FILES_ONLY -gt 0 ]; then
		GREP_LINE="^# Untracked"
	else
		GREP_LINE="^# Changes\|^# Untracked"
	fi
	
	echo "Searching in $TARGET_DIR"
	for GIT_DIR in $(find "$TARGET_DIR" -name '.git'); do
		WORK_TREE=${GIT_DIR%/.git}

		set +o errexit # disable exit on error for grep
		AHEAD_INFO=$(git --work-tree "$WORK_TREE" \
			--git-dir "$GIT_DIR" status | grep "$GREP_LINE")
		GREP_RES=$?
		set -o errexit # restore exit on error

		if [ $GREP_RES -eq 0 ]; then
			echo "$WORK_TREE"
			[ $DETAIL_INFO -gt 0 ] && echo "$AHEAD_INFO"
			[ $FULL_DETAIL -gt 0 ] && \
				git --work-tree "$WORK_TREE" \
					--git-dir "$GIT_DIR" status
			[ $WHITE_LINE -gt 0 ] && echo
		fi
	done
} #}}}

if [ ${#*} -lt 1 ]; then
	echo "Not enough arguments, specify find method."
	echo
	git-find-help
	exit 1
fi

case "$1" in
ahead)
	search-ahead $@
	;;
uncommitted)
	search-uncommitted $@
	;;
-h|--help|-help)
	git-find-help $@
	;;
*)
	echo "Unknown search method: $1"
	exit 1
	;;
esac

